// Load shared libraries
@Library('my-shared-library') _

pipeline {
    agent any

    environment {
        openshiftClusterURL  = 'https://api.ocp-training.ivolve-test.com:6443'
        K8S_NAMESPACE =        'alyaabadr'
        imageName   		   = 'alyaabadr/my-app'
        OPENSHIFT_CREDENTIALS = 'openshift-jenkins-token'
        dockerhub-credentials-id	    = 'DockerHub'
        openshiftCredentialsID =  'openshift-jenkins--token'
        APP_NAME = 'my-app'

    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub
                git '############'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    docker.build("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").inside {
                        sh 'echo "Docker image built"'
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    // Push Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-credentials-id') {
                        docker.image("${env.DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                    }
                }
            }
        }
        
        stage('Update Kubernetes Deployment') {
            steps {
                script {
                    // Edit the deployment.yaml file with the new image
                    sh """
                    sed -i 's|image: .*|image: ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}|g' k8s/deployment.yaml
                    """

                    // Apply the updated deployment to Kubernetes
                    sh """
                    kubectl apply -f k8s/deployment.yaml --namespace ${env.K8S_NAMESPACE}
                    """
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Ensure the deployment has been updated
                    sh """
                    kubectl rollout status deployment/${env.DEPLOYMENT_NAME} --namespace ${env.K8S_NAMESPACE}
                    """
                }
            }
        }
    }

    post {
        always {
            echo 'This will always run'
        }
        success {
            echo 'This will run only if the pipeline succeeds'
        }
        failure {
            echo 'This will run only if the pipeline fails'
        }
    }
}

